/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <35>; };

&left_encoder { resolution = <2>; };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESC    &kp N1  &kp N2            &kp N3    &kp N4            &kp N5                           &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp BSPC
&kp TAB    &kp Q   &kp W             &kp E     &kp R             &kp T                            &kp Y   &kp U   &kp I      &kp O     &kp P     &kp DEL
&kp CAPS   &kp A   &kp S             &kp D     &kp F             &kp G                            &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X             &kp C     &kp V             &kp B   &kp C_MUTE    &none      &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
                   &kp LEFT_CONTROL  &kp LALT  &kp LEFT_COMMAND  &mo 1   &kp RET       &kp SPACE  &mo 2   &mo 3   &kp RALT   &kp RGUI
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp C_AC_ZOOM_IN C_AC_ZOOM_OUT>;
        };

        lower_layer {
            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |RGB TOG|
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp GRAVE  &kp F1     &kp F2     &kp F3       &kp F4    &kp F5                       &kp F6     &kp F7    &kp F8           &kp F9          &kp F10    &kp F11
&none      &none      &none      &none        &none     &none                        &none      &none     &none            &kp MINUS       &kp PLUS   &kp F12
&trans     &kp EXCL   &kp AT     &kp HASH     &kp DLLR  &kp PRCNT                    &kp CARET  &kp AMPS  &kp KP_MULTIPLY  &kp UNDERSCORE  &kp EQUAL  &kp PIPE
&trans     &kp EQUAL  &kp MINUS  &kp KP_PLUS  &kp LBRC  &kp RBRC   &trans    &trans  &kp LBKT   &kp RBKT  &kp SEMI         &kp COLON       &kp BSLH   &rgb_ug RGB_TOG
                      &trans     &trans       &trans    &trans     &trans    &trans  &trans     &trans    &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |     | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |     | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //              |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&kp TILDE  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none        &none        &none                       &trans     &trans    &trans    &kp LEFT_BRACE    &kp RIGHT_BRACE    &trans
&trans     &kp INS               &kp PSCRN             &kp K_CMENU  &trans       &trans                      &kp PG_UP  &trans    &kp UP    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans
&trans     &kp LALT              &kp LCTRL             &kp LSHFT    &trans       &kp CLCK                    &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT         &kp DEL            &kp BSPC
&trans     &kp K_UNDO            &kp K_CUT             &kp K_COPY   &kp K_PASTE  &trans    &trans    &trans  &trans     &trans    &trans    &trans            &trans             &trans
                                 &trans                &trans       &trans       &trans    &trans    &trans  &trans     &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        keyboard_control {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &rgb_ug RGB_TOG  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans                          &trans           &trans           &trans           &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans                          &trans           &trans           &trans           &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans           &trans           &trans           &trans  &trans  &trans
                          &trans        &trans        &trans        &trans        &trans    &trans  &trans           &trans           &trans           &trans
            >;
        };
    };
};
